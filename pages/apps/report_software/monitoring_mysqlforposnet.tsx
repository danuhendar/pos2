'use client'
import Link from "next/link";
import { useEffect, useState,Fragment } from 'react';
import React from "react";
import FormMonitoringResources from "@/components/report_software/FormMonitoringResources";
import { useTranslation } from "react-i18next";
import { GetToken } from "@/lib/global";
import themeConfig from "@/theme.config";

//-- component menu --//
const monitoring_mysqlforposnet = () => {
    const [Token,setToken] = useState('')
    const { t, i18n } = useTranslation()
    
    useEffect(() => {
        var key = GetToken()
        setToken(key) 
    });

    return(
        <>
            <div className="mb-5">
            <ul className="flex space-x-2 rtl:space-x-reverse">
                <li>{t('Report')}</li>
                <Link href="/apps/report_software/monitoring_mysqlforposnet/" className="text-primary hover:underline">    
                    <li className="before:content-['/'] ltr:before:mr-2 rtl:before:ml-2">
                        <span>{t('MysqlForPosNet Monitoring')}</span>
                    </li>
                </Link>
            </ul>
            </div>
            <FormMonitoringResources IDReport="Report Monitoring Mysql For Posnet" 
                                    IS_Induk={"1"}
                                    url={`ws://${themeConfig.host}:${themeConfig.port_listener}/sock/v1/ReportFromListener?Token=${Token}`}
                                    command={"%systemroot%\\system32\\WindowsPowerShell\\v1.0\\powershell.exe \"function getHardware(){$pn=Get-WmiObject Win32_PhysicalMemory;$tme=($pn|Measure-Object Capacity -Sum).Sum/1GB;$ws=Get-WmiObject Win32_OperatingSystem;$mv=$ws.TotalVisibleMemorySize / 1MB;$ar=$ws.OSArchitecture;$cfo=Get-WmiObject Win32_Processor;$cf=Get-PhysicalDisk;$cs=$($cfo.Name);$ins=cmd /c systeminfo | find \\\"Install Date:\\\";$hl=-join($tme,'|',$mv,'|',$ar,'|',$cs,'|',$cf.MediaType,'|',$ins,'|');return $hl}function getMysqlForPosnet(){$res_hasil='';$startEvent=Get-WinEvent -FilterHashtable @{LogName='Application'; Id=100;}|Where-Object{ $_.Message -like '*FEDERATED*' }|Select-Object -First 1; $endEvent=Get-WinEvent -FilterHashtable @{LogName='Application'; Id=100;} | Where-Object { $_.Message -like '*ready for connections*' }|Select-Object -First 1; $startTime=[datetime]::ParseExact($startEvent.TimeCreated.ToString('yyyy-MM-dd HH:mm:ss'), 'yyyy-MM-dd HH:mm:ss', $null); $endTime=[datetime]::ParseExact($endEvent.TimeCreated.ToString('yyyy-MM-dd HH:mm:ss'), 'yyyy-MM-dd HH:mm:ss', $null); $duration=$endTime - $startTime;[void][system.reflection.Assembly]::LoadFrom('C:\\IDMCommandListeners\\MySql.Data.DLL');$registryPath='HKCU:\\Software\\INDOMARET\\POS.NET\\Database';$vName='Server';$regVal=Get-ItemProperty -Path $registryPath -Name $vName -ErrorAction Stop;$ipInduk=$regVal.$vName;$server=$ipInduk;$mysql_user = 'edp';$mysql_password = 'cUm4l!h4t@datA';$dbName = 'pos';$Connection = New-Object -TypeName MySql.Data.MySqlClient.MySqlConnection;$Connection.ConnectionString=\"\\\"SERVER=$server;DATABASE=$dbName;UID=$mysql_user;PWD=$mysql_password\"\\\";$Connection.Open();$MYSQLCommand=New-Object MySql.Data.MySqlClient.MySqlCommand;$MYSQLDataAdapter=New-Object MySql.Data.MySqlClient.MySqlDataAdapter;$MYSQLDataSet = New-Object System.Data.DataSet;$MYSQLCommand.Connection=$Connection;$mysqlCommand.CommandTimeout=120;$MYSQLCommand.CommandText=\"\\\"SELECT(SELECT VARIABLE_VALUE FROM INFORMATION_SCHEMA.GLOBAL_VARIABLES WHERE VARIABLE_NAME='VERSION') VERSION_MYSQL,(SELECT VARIABLE_VALUE FROM INFORMATION_SCHEMA.GLOBAL_VARIABLES WHERE VARIABLE_NAME RLIKE 'VERSION_COMPILE_OS') VERSION_COMPILE_OS,(SELECT VARIABLE_VALUE FROM INFORMATION_SCHEMA.GLOBAL_VARIABLES WHERE VARIABLE_NAME RLIKE 'binlog_format') BINLOG_FORMAT,(SELECT CAST(CONCAT(ROUND(VARIABLE_VALUE / 1024 / 1024), ' MB') AS CHAR) FROM INFORMATION_SCHEMA.GLOBAL_VARIABLES WHERE VARIABLE_NAME RLIKE 'innodb_buffer_pool_size') INNODB_BUFFER_POOL_SIZE,(SELECT VARIABLE_VALUE FROM INFORMATION_SCHEMA.GLOBAL_VARIABLES WHERE VARIABLE_NAME='MAX_CONNECTIONS') MAX_CONNETIONS,(SELECT VARIABLE_VALUE FROM INFORMATION_SCHEMA.GLOBAL_VARIABLES WHERE VARIABLE_NAME RLIKE 'TRX_COMMIT') TRX_COMMIT,(SELECT deskripsi FROM spec_hardware WHERE tag='ERROR_LOG' AND station=1) ERROR_LOG,(SELECT deskripsi FROM spec_hardware WHERE tag='MYSQL_BINLOG*' AND station=1) MYSQL_BINLOG,(SELECT deskripsi FROM spec_hardware WHERE tag='MYSQL_IBDATA*' AND station=1) MYSQL_IBDATA,(SELECT CAST(GROUP_CONCAT(schema_name) AS CHAR) database_asing FROM information_schema.schemata WHERE schema_name NOT IN ('information_schema', 'backup', 'dbl', 'mysql', 'pos', 'soppagent', 'pajak_daerah','temp','old')) DATABASE_ASING,(SELECT IFNULL(CONVERT(CONCAT(b.tgl,'|',time(a.mulai),'|',time(b.selesai),'|',TIMEDIFF(b.selesai, a.mulai),'|',GROUP_CONCAT(c.log)),CHAR),'||||') AS DURASI FROM (SELECT CAST(IFNULL(min(tgl_start), '00:00:00') AS CHAR) mulai FROM log_proses_idm WHERE DATE(tgl_start)=CURDATE() AND log RLIKE 'master_dt3_passtoko|MROTMTOKO|FLAGSALESFAD|MasterSaranaBaSampleFoodTasting|RRAK Akun' ORDER BY tgl_start ASC) a,(SELECT date(tgl_finish) tgl, CAST(IFNULL(max(tgl_finish), '00:00:00') AS CHAR) selesai FROM log_proses_idm WHERE DATE(tgl_start)=CURDATE() AND log RLIKE 'PosIdm') b,(SELECT CAST(TRIM(REPLACE(REPLACE(CONCAT(log, ' (', durasi, ')'), 'PosIdm : Transfer', ''), 'file', '')) AS CHAR) log FROM log_proses_idm WHERE DATE(tgl_start)=CURDATE() AND log RLIKE 'PosIdm' ORDER BY durasi DESC LIMIT 3)c) AS DURASI;\"\\\";$MYSQLDataAdapter.SelectCommand=$MYSQLCommand;$NumberOfDataSets=$MYSQLDataAdapter.Fill($MYSQLDataSet, 'data');$data_from = '';foreach($DataSet in $MYSQLDataSet.tables[0]){$data_record = -join($DataSet.VERSION_MYSQL,'|',$DataSet.VERSION_COMPILE_OS,'|',$DataSet.BINLOG_FORMAT,'|',$DataSet.INNODB_BUFFER_POOL_SIZE,'|',$DataSet.MAX_CONNETIONS,'|',$DataSet.TRX_COMMIT,'|',$DataSet.ERROR_LOG,'|',$DataSet.MYSQL_BINLOG,'|',$DataSet.MYSQL_IBDATA,'|',$DataSet.DATABASE_ASING,'|',$($duration.ToString()).Trim(),'|',$DataSet.DURASI,'|');$data_from = -join($data_from,$data_record)}$Connection.Close();$res_hasil=$data_from; return $res_hasil}function getMysqlDataFile(){$tbl_corrupt='';$pathName=(Get-WmiObject -Class Win32_Service -Filter 'Name=\\\"MysqlForPosNet\\\"').PathName; if ($pathName -match '--defaults-file=\"\"([^\\\"\"]+)\"\"') {$configFilePath = $matches[1]; $datadirLine = Select-String -Path $configFilePath -Pattern 'datadir' -SimpleMatch; if($dataDirLine -match 'datadir\\s*=\\s*\\\"\"?([^\\\"\"]+)\\\"\"?'){$dataDirPath= $matches[1] -replace '/','\\';$getErrlog=Get-ChildItem -Path $dataDirPath|Where-Object {$_.Name -eq 'errlog.err'}|Select-Object Length,LastWriteTime|ConvertTo-Csv -NoTypeInformation|Select -Skip 1|Out-String;$tbl_corrupt=Get-ChildItem -Path $dataDirPath -Recurse -Filter 'errlog.err' | ForEach-Object { Select-String -Path $_.FullName -Pattern 'Incorrect information in file:' } | Where-Object {$_ -match (Get-Date).ToString('yyMMdd')} | ForEach-Object {[regex]::Match($_.Line, 'Incorrect information in file: (\\S+)').Groups[1].Value} | Sort-Object -Unique|Out-String} else {$tbl_corrupt='Tidak ditemukan datadir';}} else {$tbl_corrupt='Tidak ditemukan path konfigurasi';}$path_bck='D:\\IDM\\errlog.txt';$k='';if(Test-Path $path_bck){$content=Get-Content -Path $path_bck;$k=$content.Split(',')[1].Trim();}else{$k='0';};$folderPath=-join($dataDirPath,'\\pos\\');$res_jumlah_file=0;$res_size_folder=0;if(Test-Path $folderPath){$files=Get-ChildItem -Path $folderPath -include *.frm -File -Recurse;$all=Get-ChildItem -Path $dataDirPath -include *.* -File -Recurse;$fileCount=$files.Count;$totalSize=($all|Measure-Object -Property Length -Sum).Sum;$res_jumlah_file=$fileCount;$res_size_folder=($totalSize/1GB);}else{};$size_jumlah_file=-join($res_size_folder,'|',$res_jumlah_file);$z=-join($dataDirPath,'|',$size_jumlah_file,'|',$getErrlog.Trim(),'|',$k,'|',$tbl_corrupt,'|');return $z}function getErr(){$x='';$pathName = (Get-WmiObject -Class Win32_Service -Filter 'Name=\\\"MysqlForPosNet\\\"').PathName; if ($pathName -match '--defaults-file=\"\"([^\\\"\"]+)\"\"') {$configFilePath = $matches[1]; $datadirLine = Select-String -Path $configFilePath -Pattern 'datadir' -SimpleMatch; if($dataDirLine -match 'datadir\\s*=\\s*\\\"\"?([^\\\"\"]+)\\\"\"?'){$dataDirPath = $matches[1] -replace '/','\\'; $errorLines = Get-ChildItem -Path $dataDirPath -Recurse -Filter 'errlog.err' | ForEach-Object { Select-String -Path $_.FullName -Pattern 'InnoDB: Error: page' } | Where-Object {$_ -match (Get-Date).ToString('yyMMdd')} | ForEach-Object { $_.Line }|Sort-Object -Unique;if($errorLines){$x='ERROR INNODB'}else{$x='NOK ERROR InnoDB|'}} else {$x='NOK DATADIR|';}} else {$x='NOK PATH KONFIGURASI|';}return $x}$u=getErr;$r=getHardware;$s=getMysqlForPosnet;$ss='';if($s -eq ''){$ss='||||||||||||||||'}else{$ss=$s}$t=getMysqlDataFile;-join($r,$ss,$t,$u);exit;\""}
                                    />
        </>
    )
};

export default monitoring_mysqlforposnet;